@page "/crud_users"
@using Lab6_LibraryManager.Services
@using TableModels
@inject UsersService UsersService
@inject BooksService BooksService

<h3>Users</h3>
<h3>Enter Username</h3>
<EditForm Model="username" OnValidSubmit="SearchUser">
    <InputText id="username" @bind-Value="username" placeholder="Username" />
    <button type="submit">Search</button>
</EditForm>

@if (searchPerformed && user == null)
{
    <p>User not found</p>
}
else if (user != null)
{
    <p>User found: @user.Name  Email: @user.Email</p>
    <button @onclick="() => editingUser = true">Edit</button>
    <button @onclick="DeleteUser" disabled="@hasBooksCheckedOut">Delete</button>
    <div style="font-size: 0.8em;">*Note: You must return your books before you delete your User information.</div>
    @if (editingUser)
    {
        <EditForm Model="user" OnValidSubmit="UpdateUser">
            <InputText id="username" @bind-Value="user.Name" placeholder="Username" />
            <InputText id="email" @bind-Value="user.Email" placeholder="Email" />
            <button type="submit">Save</button>
        </EditForm>
    }
    <h3>Checked Out Books</h3>
    <table>
        <thead>
            <tr>
                <th style="border: 1px solid black; padding: 8px; text-align: left;">Title</th>
                <th style="border: 1px solid black; padding: 8px; text-align: left;">Author</th>
                <th style="border: 1px solid black; padding: 8px; text-align: left;">ISBN</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in checkedOutBooks)
            {
                <tr>
                    <td style="border: 1px solid black; padding: 8px; text-align: left;">@book.Title</td>
                    <td style="border: 1px solid black; padding: 8px; text-align: left;">@book.Author</td>
                    <td style="border: 1px solid black; padding: 8px; text-align: left;">@book.ISBN</td>
                    <td style="border: 1px solid black; padding: 8px; text-align: left;">
                        <button @onclick="() => ReturnBook(book)">Return</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<br />

<h3>Create User</h3>
<EditForm Model="newUser" OnValidSubmit="AddUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="username" @bind-Value="newUser.Name" placeholder="Username" />
    <InputText id="email" @bind-Value="newUser.Email" placeholder="Email" />

    <button type="submit">Create User</button>
</EditForm>


@code {
    private string username = "";
    private Users user;
    private Users newUser = new Users();
    private bool searchPerformed = false;
    private List<Books> checkedOutBooks;
    private bool editingUser = false;
    private bool hasBooksCheckedOut => checkedOutBooks != null && checkedOutBooks.Count > 0;

    private async Task SearchUser()
    {
        user = await UsersService.GetByUsername(username);
        searchPerformed = true;
        if (user != null)
        {
            checkedOutBooks = await UsersService.GetCheckedOutBooks(user.Id);
        }
    }

    private async Task AddUser()
    {
        UsersService.Add(newUser);
        newUser = new Users();        
    }

    private async Task ReturnBook(Books book)
    {
        await BooksService.Return(book.Id);
        checkedOutBooks = await UsersService.GetCheckedOutBooks(user.Id);
    }

    private Task UpdateUser()
    {
        UsersService.Update(user);
        editingUser = false;
        return Task.CompletedTask;
    }

    private async Task DeleteUser()
    {
        var deleted = await UsersService.Delete(user.Id);
        if(deleted)
        {
            user = null;
            checkedOutBooks = null;
        }
        
    }
}
